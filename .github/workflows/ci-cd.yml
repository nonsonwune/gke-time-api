name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: time-api-gke-cluster
  GKE_ZONE: us-central1-a
  IMAGE: time-api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup GCP credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup GCloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and Push Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

      - name: Update image tag in terraform.tfvars
        run: |
          sed -i 's/image_tag = ".*"/image_tag = "'$GITHUB_SHA'"/' terraform/terraform.tfvars

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Workspace
        run: |
          terraform workspace select production || terraform workspace new production
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: Deploy to GKE
        run: |
          kubectl rollout status deployment/time-api -n time-api --timeout=300s

      - name: Test API
        run: |
          EXTERNAL_IP=$(kubectl get service time-api -n time-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          response=$(curl -s http://$EXTERNAL_IP/time)
          echo $response
          if [[ $response == *"current_time"* ]]; then
            echo "API test passed"
          else
            echo "API test failed"
            exit 1
          fi
