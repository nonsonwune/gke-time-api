name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: time-api-gke-cluster
  GKE_ZONE: us-central1-a
  IMAGE: time-api

jobs:
  setup-and-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup GCloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Verify active service account
        run: gcloud auth list

      - name: Verify Service Account Permissions
        run: |
          SA_EMAIL="terraform-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"
          echo "Verifying roles for service account: $SA_EMAIL"

          ROLES=$(gcloud projects get-iam-policy ${{ env.PROJECT_ID }} \
            --flatten="bindings[].members" \
            --format="value(bindings.role)" \
            --filter="bindings.members:serviceAccount:$SA_EMAIL")

          REQUIRED_ROLES=("roles/container.admin" "roles/iam.serviceAccountUser" "roles/artifactregistry.writer" "roles/storage.objectAdmin")
          for ROLE in "${REQUIRED_ROLES[@]}"; do
            if ! echo "$ROLES" | grep -q "$ROLE"; then
              echo "Error: Service account is missing required role: $ROLE"
              exit 1
            fi
          done
          echo "Service account has all required roles"

  deploy:
    needs: setup-and-verify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup GCloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Verify active service account
        run: gcloud auth list

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and Push Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

      - name: Remove Terraform Lock
        run: gsutil rm gs://${{ env.PROJECT_ID }}-tfstate/terraform/state/default.tflock || true

      - name: Create or update terraform.tfvars
        run: |
          echo "project_id = \"$PROJECT_ID\"" > terraform/terraform.tfvars
          echo "zone = \"$GKE_ZONE\"" >> terraform/terraform.tfvars
          echo "gke_num_nodes = 2" >> terraform/terraform.tfvars
          echo "image_tag = \"$GITHUB_SHA\"" >> terraform/terraform.tfvars

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: Deploy to GKE
        run: |
          kubectl apply -f terraform/modules/kubernetes_resources/k8s-resources.yaml
          kubectl set image deployment/time-api time-api=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA -n time-api

      - name: Test API
        run: |
          EXTERNAL_IP=$(kubectl get service time-api -n time-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          response=$(curl -s http://$EXTERNAL_IP/time)
          echo $response
          if [[ $response == *"current_time"* ]]; then
            echo "API test passed"
          else
            echo "API test failed"
            exit 1
          fi
